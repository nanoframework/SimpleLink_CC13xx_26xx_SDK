%%{
/*
 * Copyright (c) 2021, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== DACCC26XX.Board.c.xdt ========
 */

    /* passed by /ti/drivers/templates/Board.c.xdt */
    let DAC = args[0];
    let instances = DAC.$instances;
    if (instances.length == 0) return;

    /* get Common /ti/drivers utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    let declarations = Common.genBoardDeclarations(instances);

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = DAC.defaultInstanceName + "COUNT";

    let map = {
        "VDDS"   :  "DAC_VREF_VDDS",
        "DCOUPL" :  "DAC_VREF_DCOUPL",
        "ADCREF" :  "DAC_VREF_ADCREF"
    };

%%}
/*
 *  =============================== DAC ===============================
 */

#include <ti/drivers/DAC.h>
#include <ti/drivers/dac/DACCC26X2.h>

#define `countDef` `instances.length`

/*
 *  ======== dacCC26xxObjects ========
 */
DACCC26XX_Object dacCC26xxObjects[`countDef`];

/*
 *  ======== dacCC26xxHWAttrs ========
 */
const DACCC26XX_HWAttrs dacCC26xxHWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let packagePin, auxOut;
    %
    % packagePin = parseInt(inst.dac.dacPin.$solution.packagePinName);
    % auxOut = system.deviceData.devicePins[packagePin].attributes.alias_name;
    % auxOut = "AUXDAC_COMPA_IN_" + auxOut.replace("_", "IO");
    %
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .outputPin        = `inst.dacPinInstance.$name`,
        .dacCompAInput    = `auxOut`,
        .dacVrefSource    = `map[inst.voltageRefSource]`,
        .dacPrecharge     = `inst.preCharge`,
    },
% }
};

/*
 *  ======== DAC_config ========
 */
const DAC_Config DAC_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .object  = &dacCC26xxObjects[`inst.$name`],
        .hwAttrs = &dacCC26xxHWAttrs[`inst.$name`]
    },
% }
};

`declarations`
const uint_least8_t DAC_count = `countDef`;
