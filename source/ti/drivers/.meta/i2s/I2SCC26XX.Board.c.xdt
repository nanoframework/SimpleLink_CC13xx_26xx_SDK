%%{
/*
 * Copyright (c) 2019-2021 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== I2SCC26XX.Board.c.xdt ========
 */
    let I2S = args[0]; /* passed by /ti/drivers/templates/Board.c.xdt */

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    let instances = I2S.$instances;
    if (instances.length == 0) return;

    let declarations = Common.genBoardDeclarations(instances);

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = I2S.defaultInstanceName + "COUNT";
%%}
/*
 *  =============================== I2S ===============================
 */

#include <ti/drivers/I2S.h>
#include <ti/drivers/i2s/I2SCC26XX.h>

#define `countDef` `instances.length`

I2SCC26XX_Object i2sCC26XXObjects[`countDef`];

const I2SCC26XX_HWAttrs i2sCC26XXHWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let sckPin = inst.sckPinInstance.$name;
    % let wsPin = inst.wsPinInstance.$name;
    % let mclkPin = "GPIO_INVALID_INDEX";
    % let sd0Pin = "GPIO_INVALID_INDEX";
    % let sd1Pin = "GPIO_INVALID_INDEX";
    %
    % if (inst.sd0PinInstance) {
    %     sd0Pin = inst.sd0PinInstance.$name;
    % }
    % if (inst.sd1PinInstance) {
    %     sd1Pin = inst.sd1PinInstance.$name;
    % }
    % if (inst.mclkPinInstance) {
    %     mclkPin = inst.mclkPinInstance.$name;
    % }
    %
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .pinSD1      =  `sd1Pin`,
        .pinSD0      =  `sd0Pin`,
        .pinSCK      =  `sckPin`,
        .pinMCLK     =  `mclkPin`,
        .pinWS       =  `wsPin`,
        .intPriority =  `Common.intPriority2Hex(inst.interruptPriority)`
    }
% }
};

/*
 *  ======== I2S_config ========
 */
const I2S_Config I2S_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .object      = &i2sCC26XXObjects[`inst.$name`],
        .hwAttrs     = &i2sCC26XXHWAttrs[`inst.$name`]
    },
% }
};

`declarations`
const uint_least8_t I2S_count = `countDef`;
