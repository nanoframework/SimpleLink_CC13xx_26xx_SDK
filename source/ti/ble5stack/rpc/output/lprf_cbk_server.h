/*
 * Generated by erpcgen 1.7.4 on Thu Jun  3 17:44:56 2021.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#if !defined(_lprf_cbk_server_h_)
#define _lprf_cbk_server_h_

#ifdef __cplusplus
#include "erpc_server.h"
#include "erpc_codec.h"
extern "C"
{
#include "lprf_cbk.h"
#include <stdint.h>
#include <stdbool.h>
}

#if 10704 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif


/*!
 * @brief Service subclass for BLEmesh_cbk_access.
 */
class BLEmesh_cbk_access_service : public erpc::Service
{
public:
    BLEmesh_cbk_access_service() : Service(kBLEmesh_cbk_access_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
#ifndef ERPC_REMOVE__start_cb
    /*! @brief Server shim for start_cb of BLEmesh_cbk_access interface. */
    erpc_status_t start_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__init_cb
    /*! @brief Server shim for init_cb of BLEmesh_cbk_access interface. */
    erpc_status_t init_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__reset_cb
    /*! @brief Server shim for reset_cb of BLEmesh_cbk_access interface. */
    erpc_status_t reset_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__settings_set_cb
    /*! @brief Server shim for settings_set_cb of BLEmesh_cbk_access interface. */
    erpc_status_t settings_set_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__update_cb
    /*! @brief Server shim for update_cb of BLEmesh_cbk_access interface. */
    erpc_status_t update_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__func_cb
    /*! @brief Server shim for func_cb of BLEmesh_cbk_access interface. */
    erpc_status_t func_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif
};

/*!
 * @brief Service subclass for BLEmesh_cbk_health_srv.
 */
class BLEmesh_cbk_health_srv_service : public erpc::Service
{
public:
    BLEmesh_cbk_health_srv_service() : Service(kBLEmesh_cbk_health_srv_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
#ifndef ERPC_REMOVE__fault_get_cur_cb
    /*! @brief Server shim for fault_get_cur_cb of BLEmesh_cbk_health_srv interface. */
    erpc_status_t fault_get_cur_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__fault_get_reg_cb
    /*! @brief Server shim for fault_get_reg_cb of BLEmesh_cbk_health_srv interface. */
    erpc_status_t fault_get_reg_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__fault_clear_cb
    /*! @brief Server shim for fault_clear_cb of BLEmesh_cbk_health_srv interface. */
    erpc_status_t fault_clear_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__fault_test_cb
    /*! @brief Server shim for fault_test_cb of BLEmesh_cbk_health_srv interface. */
    erpc_status_t fault_test_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__attn_on_cb
    /*! @brief Server shim for attn_on_cb of BLEmesh_cbk_health_srv interface. */
    erpc_status_t attn_on_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__attn_off_cb
    /*! @brief Server shim for attn_off_cb of BLEmesh_cbk_health_srv interface. */
    erpc_status_t attn_off_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif
};

/*!
 * @brief Service subclass for BLEmesh_cbk.
 */
class BLEmesh_cbk_service : public erpc::Service
{
public:
    BLEmesh_cbk_service() : Service(kBLEmesh_cbk_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
#ifndef ERPC_REMOVE__output_number_cb
    /*! @brief Server shim for output_number_cb of BLEmesh_cbk interface. */
    erpc_status_t output_number_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__output_string_cb
    /*! @brief Server shim for output_string_cb of BLEmesh_cbk interface. */
    erpc_status_t output_string_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__input_cb
    /*! @brief Server shim for input_cb of BLEmesh_cbk interface. */
    erpc_status_t input_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__input_complete_cb
    /*! @brief Server shim for input_complete_cb of BLEmesh_cbk interface. */
    erpc_status_t input_complete_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__unprovisioned_beacon_cb
    /*! @brief Server shim for unprovisioned_beacon_cb of BLEmesh_cbk interface. */
    erpc_status_t unprovisioned_beacon_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__link_open_cb
    /*! @brief Server shim for link_open_cb of BLEmesh_cbk interface. */
    erpc_status_t link_open_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__link_close_cb
    /*! @brief Server shim for link_close_cb of BLEmesh_cbk interface. */
    erpc_status_t link_close_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__complete_cb
    /*! @brief Server shim for complete_cb of BLEmesh_cbk interface. */
    erpc_status_t complete_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__node_added_cb
    /*! @brief Server shim for node_added_cb of BLEmesh_cbk interface. */
    erpc_status_t node_added_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__reset_prov_cb
    /*! @brief Server shim for reset_prov_cb of BLEmesh_cbk interface. */
    erpc_status_t reset_prov_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__hb_recv_cb
    /*! @brief Server shim for hb_recv_cb of BLEmesh_cbk interface. */
    erpc_status_t hb_recv_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__hb_sub_end_cb
    /*! @brief Server shim for hb_sub_end_cb of BLEmesh_cbk interface. */
    erpc_status_t hb_sub_end_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__lpn_friendship_established_cb
    /*! @brief Server shim for lpn_friendship_established_cb of BLEmesh_cbk interface. */
    erpc_status_t lpn_friendship_established_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__lpn_friendship_terminated_cb
    /*! @brief Server shim for lpn_friendship_terminated_cb of BLEmesh_cbk interface. */
    erpc_status_t lpn_friendship_terminated_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__lpn_polled_cb
    /*! @brief Server shim for lpn_polled_cb of BLEmesh_cbk interface. */
    erpc_status_t lpn_polled_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__friend_friendship_established_cb
    /*! @brief Server shim for friend_friendship_established_cb of BLEmesh_cbk interface. */
    erpc_status_t friend_friendship_established_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__friend_friendship_terminated_cb
    /*! @brief Server shim for friend_friendship_terminated_cb of BLEmesh_cbk interface. */
    erpc_status_t friend_friendship_terminated_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif

#ifndef ERPC_REMOVE__appkey_evt_cb
    /*! @brief Server shim for appkey_evt_cb of BLEmesh_cbk interface. */
    erpc_status_t appkey_evt_cb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
#endif
};

extern "C" {
#else
#include "lprf_cbk.h"
#endif // __cplusplus

typedef void * erpc_service_t;

erpc_service_t create_BLEmesh_cbk_access_service(void);

void destroy_BLEmesh_cbk_access_service(void);

erpc_service_t create_BLEmesh_cbk_health_srv_service(void);

void destroy_BLEmesh_cbk_health_srv_service(void);

erpc_service_t create_BLEmesh_cbk_service(void);

void destroy_BLEmesh_cbk_service(void);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // _lprf_cbk_server_h_
