/*
 * Generated by erpcgen 1.7.4 on Thu Jun  3 17:44:56 2021.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "erpc_client_manager.h"
#include "erpc_port.h"
#include "erpc_codec.h"
extern "C"
{
#include "lprf_api.h"
// import callbacks declaration from other groups
#include "lprf_cbk.h"
}

#if 10704 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

//extern ClientManager *g_client;
ClientManager *lprf_api_cm;

//! @brief Function to write struct bt_mesh_prov_raw
static void write_bt_mesh_prov_raw_struct(erpc::Codec * codec, const bt_mesh_prov_raw * data);

//! @brief Function to write struct bt_mesh_comp_raw
static void write_bt_mesh_comp_raw_struct(erpc::Codec * codec, const bt_mesh_comp_raw * data);

//! @brief Function to write struct bt_mesh_elem_raw
static void write_bt_mesh_elem_raw_struct(erpc::Codec * codec, const bt_mesh_elem_raw * data);

//! @brief Function to write struct bt_mesh_model_pub_raw
static void write_bt_mesh_model_pub_raw_struct(erpc::Codec * codec, const bt_mesh_model_pub_raw * data);

//! @brief Function to write struct net_buf_simple_raw
static void write_net_buf_simple_raw_struct(erpc::Codec * codec, const net_buf_simple_raw * data);

//! @brief Function to write struct bt_mesh_model_raw
static void write_bt_mesh_model_raw_struct(erpc::Codec * codec, const bt_mesh_model_raw * data);

//! @brief Function to write struct bt_mesh_model_cb_raw
static void write_bt_mesh_model_cb_raw_struct(erpc::Codec * codec, const bt_mesh_model_cb_raw * data);

//! @brief Function to write struct bt_mesh_model_op_raw
static void write_bt_mesh_model_op_raw_struct(erpc::Codec * codec, const bt_mesh_model_op_raw * data);

//! @brief Function to write struct bt_mesh_health_srv_raw
static void write_bt_mesh_health_srv_raw_struct(erpc::Codec * codec, const bt_mesh_health_srv_raw * data);

//! @brief Function to write struct bt_mesh_health_srv_cb_raw
static void write_bt_mesh_health_srv_cb_raw_struct(erpc::Codec * codec, const bt_mesh_health_srv_cb_raw * data);

//! @brief Function to write struct bt_mesh_cfg_mod_pub_raw
static void write_bt_mesh_cfg_mod_pub_raw_struct(erpc::Codec * codec, const bt_mesh_cfg_mod_pub_raw * data);

//! @brief Function to write struct bt_mesh_msg_ctx_raw
static void write_bt_mesh_msg_ctx_raw_struct(erpc::Codec * codec, const bt_mesh_msg_ctx_raw * data);


// Write struct bt_mesh_prov_raw function implementation
static void write_bt_mesh_prov_raw_struct(erpc::Codec * codec, const bt_mesh_prov_raw * data)
{
    codec->startWriteList(data->uuid_len);
    for (uint32_t listCount0 = 0; listCount0 < data->uuid_len; ++listCount0)
    {
        codec->write(data->uuid[listCount0]);
    }

    codec->writeString(strlen(data->uri), data->uri);

    codec->write(static_cast<int32_t>(data->oob_info));

    if (data->static_val == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->startWriteList(data->static_val_len);
        for (uint32_t listCount1 = 0; listCount1 < data->static_val_len; ++listCount1)
        {
            codec->write(data->static_val[listCount1]);
        }
    }

    codec->write(data->output_size);

    codec->write(data->output_actions);

    codec->write(data->input_size);

    codec->write(data->input_actions);

    if (data->output_number == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(output_number_cb), (funPtr)(data->output_number));
    }

    if (data->output_string == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(output_string_cb), (funPtr)(data->output_string));
    }

    if (data->input == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(input_cb), (funPtr)(data->input));
    }

    if (data->input_complete == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(input_complete_cb), (funPtr)(data->input_complete));
    }

    if (data->unprovisioned_beacon == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(unprovisioned_beacon_cb), (funPtr)(data->unprovisioned_beacon));
    }

    if (data->link_open == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(link_open_cb), (funPtr)(data->link_open));
    }

    if (data->link_close == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(link_close_cb), (funPtr)(data->link_close));
    }

    if (data->complete == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(complete_cb), (funPtr)(data->complete));
    }

    if (data->node_added == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(node_added_cb), (funPtr)(data->node_added));
    }

    if (data->reset == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(reset_prov_cb), (funPtr)(data->reset));
    }
}

// Write struct bt_mesh_comp_raw function implementation
static void write_bt_mesh_comp_raw_struct(erpc::Codec * codec, const bt_mesh_comp_raw * data)
{
    codec->write(data->cid);

    codec->write(data->pid);

    codec->write(data->vid);

    codec->write(data->elem_count);

    codec->write(data->elem_placeholder);
}

// Write struct bt_mesh_elem_raw function implementation
static void write_bt_mesh_elem_raw_struct(erpc::Codec * codec, const bt_mesh_elem_raw * data)
{
    codec->write(data->addr);

    codec->write(data->loc);

    codec->write(data->model_count);

    codec->write(data->vnd_model_count);

    codec->write(data->models_placeholder);

    codec->write(data->vnd_models_placeholder);
}

// Write struct bt_mesh_model_pub_raw function implementation
static void write_bt_mesh_model_pub_raw_struct(erpc::Codec * codec, const bt_mesh_model_pub_raw * data)
{
    codec->write(data->addr);

    codec->write(data->key);

    codec->write(data->ttl);

    codec->write(data->retransmit);

    codec->write(data->period);

    codec->write(data->period_div);

    codec->write(data->period_start);

    write_net_buf_simple_raw_struct(codec, &(*data->msg));

    if (data->update == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(update_cb), (funPtr)(data->update));
    }
}

// Write struct net_buf_simple_raw function implementation
static void write_net_buf_simple_raw_struct(erpc::Codec * codec, const net_buf_simple_raw * data)
{
    codec->startWriteList(data->len);
    for (uint32_t listCount0 = 0; listCount0 < data->len; ++listCount0)
    {
        codec->write(data->data[listCount0]);
    }

    codec->write(data->size);

    codec->write(*data->__buf);
}

// Write struct bt_mesh_model_raw function implementation
static void write_bt_mesh_model_raw_struct(erpc::Codec * codec, const bt_mesh_model_raw * data)
{
    codec->startWriteUnion(data->model_type);
    switch (data->model_type)
    {
        case SIG_MODEL:
        {
            codec->write(data->model.id);
            break;
        }
        case VND_MODEL:
        {
            codec->write(data->model.company);
            codec->write(data->model.vnd_id);
            break;
        }
    }

    if (data->pub == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        write_bt_mesh_model_pub_raw_struct(codec, &(*data->pub));
    }

    if (data->cb == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        write_bt_mesh_model_cb_raw_struct(codec, &(*data->cb));
    }

    if (data->user_data == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeString(strlen(data->user_data), data->user_data);
    }
}

// Write struct bt_mesh_model_cb_raw function implementation
static void write_bt_mesh_model_cb_raw_struct(erpc::Codec * codec, const bt_mesh_model_cb_raw * data)
{
    if (data->settings_set == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(settings_set_cb), (funPtr)(data->settings_set));
    }

    if (data->start == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(start_cb), (funPtr)(data->start));
    }

    if (data->init == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(init_cb), (funPtr)(data->init));
    }

    if (data->reset == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(reset_cb), (funPtr)(data->reset));
    }
}

// Write struct bt_mesh_model_op_raw function implementation
static void write_bt_mesh_model_op_raw_struct(erpc::Codec * codec, const bt_mesh_model_op_raw * data)
{
    codec->write(data->opcode);

    codec->write(data->min_len);

    if (data->func == NULL)
    {
        codec->writeNullFlag(true);
    }
    else
    {
        codec->writeNullFlag(false);
        codec->writeCallback((funPtr)(func_cb), (funPtr)(data->func));
    }
}

// Write struct bt_mesh_health_srv_raw function implementation
static void write_bt_mesh_health_srv_raw_struct(erpc::Codec * codec, const bt_mesh_health_srv_raw * data)
{
    codec->write(data->model_placeholder);

    write_bt_mesh_health_srv_cb_raw_struct(codec, &(*data->cb));

    codec->write(data->k_delayed_work_placeholder);
}

// Write struct bt_mesh_health_srv_cb_raw function implementation
static void write_bt_mesh_health_srv_cb_raw_struct(erpc::Codec * codec, const bt_mesh_health_srv_cb_raw * data)
{
    codec->writeCallback((funPtr)(fault_get_cur_cb), (funPtr)(data->fault_get_cur));

    codec->writeCallback((funPtr)(fault_get_reg_cb), (funPtr)(data->fault_get_reg));

    codec->writeCallback((funPtr)(fault_clear_cb), (funPtr)(data->fault_clear));

    codec->writeCallback((funPtr)(fault_test_cb), (funPtr)(data->fault_test));

    codec->writeCallback((funPtr)(attn_on_cb), (funPtr)(data->attn_on));

    codec->writeCallback((funPtr)(attn_off_cb), (funPtr)(data->attn_off));
}

// Write struct bt_mesh_cfg_mod_pub_raw function implementation
static void write_bt_mesh_cfg_mod_pub_raw_struct(erpc::Codec * codec, const bt_mesh_cfg_mod_pub_raw * data)
{
    codec->write(data->addr);

    codec->write(data->app_idx);

    codec->write(data->cred_flag);

    codec->write(data->ttl);

    codec->write(data->period);

    codec->write(data->transmit);
}

// Write struct bt_mesh_msg_ctx_raw function implementation
static void write_bt_mesh_msg_ctx_raw_struct(erpc::Codec * codec, const bt_mesh_msg_ctx_raw * data)
{
    codec->write(data->net_idx);

    codec->write(data->app_idx);

    codec->write(data->addr);

    codec->write(data->recv_dst);

    codec->write(data->recv_rssi);

    codec->write(data->recv_ttl);

    codec->write(data->send_rel);

    codec->write(data->send_ttl);
}



// BLEmesh_api interface mesh_init function client shim.
int32_t mesh_init(void)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_mesh_init_id, request.getSequence());

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_mesh_init_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_init_prov_raw_init function client shim.
int32_t bt_mesh_init_prov_raw_init(const bt_mesh_prov_raw * prov_raw)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_init_prov_raw_init_id, request.getSequence());

        write_bt_mesh_prov_raw_struct(codec, prov_raw);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_init_prov_raw_init_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_init_comp_raw_init function client shim.
int32_t bt_mesh_init_comp_raw_init(const bt_mesh_comp_raw * comp_raw)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_init_comp_raw_init_id, request.getSequence());

        write_bt_mesh_comp_raw_struct(codec, comp_raw);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_init_comp_raw_init_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_init_elem_raw_init function client shim.
int32_t bt_mesh_init_elem_raw_init(uint16_t elem_index, const bt_mesh_elem_raw * elem_raw)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_init_elem_raw_init_id, request.getSequence());

        codec->write(elem_index);

        write_bt_mesh_elem_raw_struct(codec, elem_raw);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_init_elem_raw_init_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_cfg_cli_raw_init function client shim.
int32_t bt_mesh_cfg_cli_raw_init(uint16_t elem_index, uint16_t model_index)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_cfg_cli_raw_init_id, request.getSequence());

        codec->write(elem_index);

        codec->write(model_index);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_cfg_cli_raw_init_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_init_model_raw_init function client shim.
int32_t bt_mesh_init_model_raw_init(uint16_t elem_index, uint16_t model_index, const bt_mesh_model_raw * model_raw, const bt_mesh_model_op_raw * op_raw, uint16_t op_len)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_init_model_raw_init_id, request.getSequence());

        codec->write(elem_index);

        codec->write(model_index);

        write_bt_mesh_model_raw_struct(codec, model_raw);

        codec->startWriteList(op_len);
        for (uint32_t listCount0 = 0; listCount0 < op_len; ++listCount0)
        {
            write_bt_mesh_model_op_raw_struct(codec, &(op_raw[listCount0]));
        }

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_init_model_raw_init_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_cfg_srv_raw_init function client shim.
int32_t bt_mesh_cfg_srv_raw_init(uint16_t elem_index)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_cfg_srv_raw_init_id, request.getSequence());

        codec->write(elem_index);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_cfg_srv_raw_init_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_health_srv_raw_init function client shim.
int32_t bt_mesh_health_srv_raw_init(uint16_t elem_index, uint16_t model_index, const bt_mesh_health_srv_raw * health_srv, uint8_t max_faults)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_health_srv_raw_init_id, request.getSequence());

        codec->write(elem_index);

        codec->write(model_index);

        write_bt_mesh_health_srv_raw_struct(codec, health_srv);

        codec->write(max_faults);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_health_srv_raw_init_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_reset function client shim.
void bt_mesh_reset(void)
{
    erpc_status_t err = kErpcStatus_Success;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_reset_id, request.getSequence());

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_reset_id);

    return;
}

// BLEmesh_api interface bt_mesh_suspend function client shim.
int32_t bt_mesh_suspend(void)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_suspend_id, request.getSequence());

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_suspend_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_resume function client shim.
int32_t bt_mesh_resume(void)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_resume_id, request.getSequence());

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_resume_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_iv_update_test function client shim.
void bt_mesh_iv_update_test(bool enable)
{
    erpc_status_t err = kErpcStatus_Success;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_iv_update_test_id, request.getSequence());

        codec->write(enable);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_iv_update_test_id);

    return;
}

// BLEmesh_api interface bt_mesh_iv_update function client shim.
bool bt_mesh_iv_update(void)
{
    erpc_status_t err = kErpcStatus_Success;

    bool result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_iv_update_id, request.getSequence());

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_iv_update_id);

    if (err)
    {
        return false;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_lpn_set function client shim.
int32_t bt_mesh_lpn_set(bool enable)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_lpn_set_id, request.getSequence());

        codec->write(enable);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_lpn_set_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_lpn_poll function client shim.
int32_t bt_mesh_lpn_poll(void)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_lpn_poll_id, request.getSequence());

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_lpn_poll_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_input_string function client shim.
int32_t bt_mesh_input_string(const char * str)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_input_string_id, request.getSequence());

        codec->writeString(strlen(str), str);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_input_string_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_input_number function client shim.
int32_t bt_mesh_input_number(uint32_t num)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_input_number_id, request.getSequence());

        codec->write(num);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_input_number_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_prov_enable_wrapper function client shim.
int32_t bt_mesh_prov_enable_wrapper(bt_mesh_prov_bearer bearers)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_prov_enable_wrapper_id, request.getSequence());

        codec->write(static_cast<int32_t>(bearers));

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_prov_enable_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_prov_disable_wrapper function client shim.
int32_t bt_mesh_prov_disable_wrapper(bt_mesh_prov_bearer bearers)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_prov_disable_wrapper_id, request.getSequence());

        codec->write(static_cast<int32_t>(bearers));

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_prov_disable_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_provision function client shim.
int32_t bt_mesh_provision(const uint8_t net_key[16], uint16_t net_idx, uint8_t flags, uint32_t iv_index, uint16_t addr, const uint8_t dev_key[16])
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_provision_id, request.getSequence());

        for (uint32_t arrayCount0 = 0; arrayCount0 < 16; ++arrayCount0)
        {
            codec->write(net_key[arrayCount0]);
        }

        codec->write(net_idx);

        codec->write(flags);

        codec->write(iv_index);

        codec->write(addr);

        for (uint32_t arrayCount0 = 0; arrayCount0 < 16; ++arrayCount0)
        {
            codec->write(dev_key[arrayCount0]);
        }

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_provision_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_cfg_app_key_add_wrapper function client shim.
int32_t bt_mesh_cfg_app_key_add_wrapper(uint16_t net_idx, uint16_t addr, uint16_t key_net_idx, uint16_t key_app_idx, const uint8_t app_key[16])
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_cfg_app_key_add_wrapper_id, request.getSequence());

        codec->write(net_idx);

        codec->write(addr);

        codec->write(key_net_idx);

        codec->write(key_app_idx);

        for (uint32_t arrayCount0 = 0; arrayCount0 < 16; ++arrayCount0)
        {
            codec->write(app_key[arrayCount0]);
        }

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_cfg_app_key_add_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_cfg_mod_app_bind_vnd_wrapper function client shim.
int32_t bt_mesh_cfg_mod_app_bind_vnd_wrapper(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_app_idx, uint16_t mod_id, uint16_t cid)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_cfg_mod_app_bind_vnd_wrapper_id, request.getSequence());

        codec->write(net_idx);

        codec->write(addr);

        codec->write(elem_addr);

        codec->write(mod_app_idx);

        codec->write(mod_id);

        codec->write(cid);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_cfg_mod_app_bind_vnd_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_cfg_mod_app_bind_wrapper function client shim.
int32_t bt_mesh_cfg_mod_app_bind_wrapper(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_app_idx, uint16_t mod_id)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_cfg_mod_app_bind_wrapper_id, request.getSequence());

        codec->write(net_idx);

        codec->write(addr);

        codec->write(elem_addr);

        codec->write(mod_app_idx);

        codec->write(mod_id);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_cfg_mod_app_bind_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_cfg_mod_sub_add_vnd_wrapper function client shim.
int32_t bt_mesh_cfg_mod_sub_add_vnd_wrapper(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t sub_addr, uint16_t mod_id, uint16_t cid)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_cfg_mod_sub_add_vnd_wrapper_id, request.getSequence());

        codec->write(net_idx);

        codec->write(addr);

        codec->write(elem_addr);

        codec->write(sub_addr);

        codec->write(mod_id);

        codec->write(cid);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_cfg_mod_sub_add_vnd_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_cfg_mod_sub_add_wrapper function client shim.
int32_t bt_mesh_cfg_mod_sub_add_wrapper(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t sub_addr, uint16_t mod_id)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_cfg_mod_sub_add_wrapper_id, request.getSequence());

        codec->write(net_idx);

        codec->write(addr);

        codec->write(elem_addr);

        codec->write(sub_addr);

        codec->write(mod_id);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_cfg_mod_sub_add_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_cfg_mod_sub_del_wrapper function client shim.
int32_t bt_mesh_cfg_mod_sub_del_wrapper(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t sub_addr, uint16_t mod_id)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_cfg_mod_sub_del_wrapper_id, request.getSequence());

        codec->write(net_idx);

        codec->write(addr);

        codec->write(elem_addr);

        codec->write(sub_addr);

        codec->write(mod_id);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_cfg_mod_sub_del_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_cfg_mod_sub_del_vnd_wrapper function client shim.
int32_t bt_mesh_cfg_mod_sub_del_vnd_wrapper(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t sub_addr, uint16_t mod_id, uint16_t cid)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_cfg_mod_sub_del_vnd_wrapper_id, request.getSequence());

        codec->write(net_idx);

        codec->write(addr);

        codec->write(elem_addr);

        codec->write(sub_addr);

        codec->write(mod_id);

        codec->write(cid);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_cfg_mod_sub_del_vnd_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_cfg_mod_sub_va_add_wrapper function client shim.
int32_t bt_mesh_cfg_mod_sub_va_add_wrapper(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, const uint8_t label[16], uint16_t mod_id)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_cfg_mod_sub_va_add_wrapper_id, request.getSequence());

        codec->write(net_idx);

        codec->write(addr);

        codec->write(elem_addr);

        for (uint32_t arrayCount0 = 0; arrayCount0 < 16; ++arrayCount0)
        {
            codec->write(label[arrayCount0]);
        }

        codec->write(mod_id);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_cfg_mod_sub_va_add_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_cfg_mod_sub_va_add_vnd_wrapper function client shim.
int32_t bt_mesh_cfg_mod_sub_va_add_vnd_wrapper(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, const uint8_t label[16], uint16_t mod_id, uint16_t cid)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_cfg_mod_sub_va_add_vnd_wrapper_id, request.getSequence());

        codec->write(net_idx);

        codec->write(addr);

        codec->write(elem_addr);

        for (uint32_t arrayCount0 = 0; arrayCount0 < 16; ++arrayCount0)
        {
            codec->write(label[arrayCount0]);
        }

        codec->write(mod_id);

        codec->write(cid);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_cfg_mod_sub_va_add_vnd_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_cfg_mod_pub_set_wrapper function client shim.
int32_t bt_mesh_cfg_mod_pub_set_wrapper(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_id, bt_mesh_cfg_mod_pub_raw * pub)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_cfg_mod_pub_set_wrapper_id, request.getSequence());

        codec->write(net_idx);

        codec->write(addr);

        codec->write(elem_addr);

        codec->write(mod_id);

        write_bt_mesh_cfg_mod_pub_raw_struct(codec, pub);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_cfg_mod_pub_set_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_cfg_mod_pub_set_vnd_wrapper function client shim.
int32_t bt_mesh_cfg_mod_pub_set_vnd_wrapper(uint16_t net_idx, uint16_t addr, uint16_t elem_addr, uint16_t mod_id, uint16_t cid, bt_mesh_cfg_mod_pub_raw * pub)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_cfg_mod_pub_set_vnd_wrapper_id, request.getSequence());

        codec->write(net_idx);

        codec->write(addr);

        codec->write(elem_addr);

        codec->write(mod_id);

        codec->write(cid);

        write_bt_mesh_cfg_mod_pub_raw_struct(codec, pub);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_cfg_mod_pub_set_vnd_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_is_provisioned function client shim.
bool bt_mesh_is_provisioned(void)
{
    erpc_status_t err = kErpcStatus_Success;

    bool result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_is_provisioned_id, request.getSequence());

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_is_provisioned_id);

    if (err)
    {
        return false;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_proxy_identity_enable function client shim.
int32_t bt_mesh_proxy_identity_enable(void)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_proxy_identity_enable_id, request.getSequence());

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_proxy_identity_enable_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_model_publish_wrapper function client shim.
int32_t bt_mesh_model_publish_wrapper(uint16_t elem_idx, uint8_t is_vnd, uint16_t model_index, net_buf_simple_raw * msg)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_model_publish_wrapper_id, request.getSequence());

        codec->write(elem_idx);

        codec->write(is_vnd);

        codec->write(model_index);

        write_net_buf_simple_raw_struct(codec, msg);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_model_publish_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_model_send_data_wrapper function client shim.
int32_t bt_mesh_model_send_data_wrapper(uint16_t elem_idx, uint8_t is_vnd, uint16_t model_index, bt_mesh_msg_ctx_raw * ctx, net_buf_simple_raw * msg)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_model_send_data_wrapper_id, request.getSequence());

        codec->write(elem_idx);

        codec->write(is_vnd);

        codec->write(model_index);

        write_bt_mesh_msg_ctx_raw_struct(codec, ctx);

        write_net_buf_simple_raw_struct(codec, msg);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_model_send_data_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_model_find_wrapper function client shim.
int32_t bt_mesh_model_find_wrapper(uint16_t elem_idx, uint16_t id)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_model_find_wrapper_id, request.getSequence());

        codec->write(elem_idx);

        codec->write(id);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_model_find_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_model_find_vnd_wrapper function client shim.
int32_t bt_mesh_model_find_vnd_wrapper(uint16_t elem_idx, uint16_t company, uint16_t id)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_model_find_vnd_wrapper_id, request.getSequence());

        codec->write(elem_idx);

        codec->write(company);

        codec->write(id);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_model_find_vnd_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_model_extend_wrapper function client shim.
int32_t bt_mesh_model_extend_wrapper(uint16_t mod_elem_idx, uint8_t mod_is_vnd, uint16_t mod_idx, uint16_t base_mod_elem_idx, uint8_t base_mod_is_vnd, uint16_t base_mod_idx)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_model_extend_wrapper_id, request.getSequence());

        codec->write(mod_elem_idx);

        codec->write(mod_is_vnd);

        codec->write(mod_idx);

        codec->write(base_mod_elem_idx);

        codec->write(base_mod_is_vnd);

        codec->write(base_mod_idx);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_model_extend_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface bt_mesh_fault_update_wrapper function client shim.
int32_t bt_mesh_fault_update_wrapper(uint16_t elem_idx)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_bt_mesh_fault_update_wrapper_id, request.getSequence());

        codec->write(elem_idx);

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_bt_mesh_fault_update_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface settings_load_wrapper function client shim.
int32_t settings_load_wrapper(void)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_settings_load_wrapper_id, request.getSequence());

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_settings_load_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// BLEmesh_api interface store_data_wrapper function client shim.
int32_t store_data_wrapper(uint16_t elem_index, uint8_t is_vnd, uint16_t model_index, const char * name, uint8_t data_len, const uint8_t * data)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = lprf_api_cm->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, kBLEmesh_api_service_id, kBLEmesh_api_store_data_wrapper_id, request.getSequence());

        codec->write(elem_index);

        codec->write(is_vnd);

        codec->write(model_index);

        codec->writeString(strlen(name), name);

        codec->startWriteList(data_len);
        for (uint32_t listCount0 = 0; listCount0 < data_len; ++listCount0)
        {
            codec->write(data[listCount0]);
        }

        // Send message to server
        // Codec status is checked inside this function.
        lprf_api_cm->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    lprf_api_cm->releaseRequest(request);

    // Invoke error handler callback function
    lprf_api_cm->callErrorHandler(err, kBLEmesh_api_store_data_wrapper_id);

    if (err)
    {
        return -1;
    }

    return result;
}
